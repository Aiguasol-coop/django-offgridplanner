# Generated by Django 5.0.11 on 2025-03-12 11:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dt', models.DateTimeField()),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('temp_air', models.FloatField(blank=True, null=True)),
                ('ghi', models.FloatField(blank=True, null=True)),
                ('dni', models.FloatField(blank=True, null=True)),
                ('dhi', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DemandCoverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(null=True)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DurationCurve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(null=True)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Emissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(null=True)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EnergyFlow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(null=True)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(null=True)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Nodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(null=True)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(blank=True, max_length=80, null=True)),
                ('status', models.CharField(default='not yet started', max_length=25)),
                ('project', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_consumers', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('n_shs_consumers', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('n_poles', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('n_distribution_links', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('n_connection_links', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('length_distribution_cable', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('average_length_distribution_cable', models.FloatField(blank=True, null=True)),
                ('length_connection_cable', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('average_length_connection_cable', models.FloatField(blank=True, null=True)),
                ('cost_grid', models.PositiveIntegerField(blank=True, null=True)),
                ('cost_shs', models.PositiveIntegerField(blank=True, null=True)),
                ('lcoe', models.PositiveIntegerField(blank=True, null=True)),
                ('res', models.FloatField(blank=True, null=True)),
                ('shortage_total', models.FloatField(blank=True, null=True)),
                ('surplus_rate', models.FloatField(blank=True, null=True)),
                ('cost_renewable_assets', models.FloatField(blank=True, null=True)),
                ('cost_non_renewable_assets', models.FloatField(blank=True, null=True)),
                ('cost_fuel', models.FloatField(blank=True, null=True)),
                ('pv_capacity', models.FloatField(blank=True, null=True)),
                ('battery_capacity', models.FloatField(blank=True, null=True)),
                ('inverter_capacity', models.FloatField(blank=True, null=True)),
                ('rectifier_capacity', models.FloatField(blank=True, null=True)),
                ('diesel_genset_capacity', models.FloatField(blank=True, null=True)),
                ('peak_demand', models.FloatField(blank=True, null=True)),
                ('surplus', models.FloatField(blank=True, null=True)),
                ('fuel_to_diesel_genset', models.FloatField(blank=True, null=True)),
                ('diesel_genset_to_rectifier', models.FloatField(blank=True, null=True)),
                ('diesel_genset_to_demand', models.FloatField(blank=True, null=True)),
                ('rectifier_to_dc_bus', models.FloatField(blank=True, null=True)),
                ('pv_to_dc_bus', models.FloatField(blank=True, null=True)),
                ('battery_to_dc_bus', models.FloatField(blank=True, null=True)),
                ('dc_bus_to_battery', models.FloatField(blank=True, null=True)),
                ('dc_bus_to_inverter', models.FloatField(blank=True, null=True)),
                ('dc_bus_to_surplus', models.FloatField(blank=True, null=True)),
                ('inverter_to_demand', models.FloatField(blank=True, null=True)),
                ('time_grid_design', models.FloatField(blank=True, null=True)),
                ('time_energy_system_design', models.FloatField(blank=True, null=True)),
                ('time', models.FloatField(blank=True, null=True)),
                ('co2_savings', models.FloatField(blank=True, null=True)),
                ('max_voltage_drop', models.FloatField(blank=True, null=True)),
                ('infeasible', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('average_annual_demand_per_consumer', models.FloatField(blank=True, null=True)),
                ('total_annual_consumption', models.FloatField(blank=True, null=True)),
                ('upfront_invest_grid', models.FloatField(blank=True, null=True)),
                ('upfront_invest_diesel_gen', models.FloatField(blank=True, null=True)),
                ('upfront_invest_inverter', models.FloatField(blank=True, null=True)),
                ('upfront_invest_rectifier', models.FloatField(blank=True, null=True)),
                ('upfront_invest_battery', models.FloatField(blank=True, null=True)),
                ('upfront_invest_pv', models.FloatField(blank=True, null=True)),
                ('co2_emissions', models.FloatField(blank=True, null=True)),
                ('fuel_consumption', models.FloatField(blank=True, null=True)),
                ('base_load', models.FloatField(blank=True, null=True)),
                ('max_shortage', models.FloatField(blank=True, null=True)),
                ('epc_total', models.FloatField(blank=True, null=True)),
                ('epc_pv', models.FloatField(blank=True, null=True)),
                ('epc_diesel_genset', models.FloatField(blank=True, null=True)),
                ('epc_inverter', models.FloatField(blank=True, null=True)),
                ('epc_rectifier', models.FloatField(blank=True, null=True)),
                ('epc_battery', models.FloatField(blank=True, null=True)),
                ('simulation', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='optimization.simulation')),
            ],
        ),
    ]
