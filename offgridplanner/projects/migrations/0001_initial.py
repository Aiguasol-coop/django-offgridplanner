# Generated by Django 5.0.11 on 2025-03-06 13:16

import django.core.validators
import django.db.models.deletion
import offgridplanner.projects.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Options",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_notification", models.BooleanField(default=False)),
                ("do_demand_estimation", models.BooleanField(default=True)),
                ("do_grid_optimization", models.BooleanField(default=True)),
                ("do_es_design_optimization", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=51, null=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=201, null=True),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "interest_rate",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)]
                    ),
                ),
                (
                    "lifetime",
                    models.PositiveSmallIntegerField(
                        default=25,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(35),
                        ],
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        default=offgridplanner.projects.models.default_start_date
                    ),
                ),
                ("temporal_resolution", models.PositiveSmallIntegerField(default=1)),
                ("n_days", models.PositiveSmallIntegerField(default=365)),
                (
                    "options",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="projects.options",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Nodes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.JSONField(null=True)),
                (
                    "project",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Links",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.JSONField(null=True)),
                (
                    "project",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GridDesign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "distribution_cable_lifetime",
                    models.PositiveSmallIntegerField(default=25),
                ),
                ("distribution_cable_capex", models.FloatField(default=10)),
                ("distribution_cable_max_length", models.FloatField(default=50)),
                (
                    "connection_cable_lifetime",
                    models.PositiveSmallIntegerField(default=25),
                ),
                ("connection_cable_capex", models.FloatField(default=4)),
                ("connection_cable_max_length", models.FloatField(default=20)),
                ("pole_lifetime", models.PositiveSmallIntegerField(default=25)),
                ("pole_capex", models.FloatField(default=800)),
                ("pole_max_n_connections", models.PositiveSmallIntegerField(default=5)),
                ("mg_connection_cost", models.FloatField(default=140)),
                ("include_shs", models.BooleanField(default=True)),
                (
                    "shs_max_grid_cost",
                    models.FloatField(blank=True, default=0.6, null=True),
                ),
                (
                    "project",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Energysystemdesign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "battery_settings_is_selected",
                    models.IntegerField(
                        blank=True,
                        db_column="battery__settings__is_selected",
                        null=True,
                    ),
                ),
                (
                    "battery_settings_design",
                    models.IntegerField(
                        blank=True, db_column="battery__settings__design", null=True
                    ),
                ),
                (
                    "battery_parameters_nominal_capacity",
                    models.FloatField(
                        blank=True,
                        db_column="battery__parameters__nominal_capacity",
                        null=True,
                    ),
                ),
                (
                    "battery_parameters_lifetime",
                    models.PositiveIntegerField(
                        blank=True, db_column="battery__parameters__lifetime", null=True
                    ),
                ),
                (
                    "battery_parameters_capex",
                    models.FloatField(
                        blank=True, db_column="battery__parameters__capex", null=True
                    ),
                ),
                (
                    "battery_parameters_opex",
                    models.FloatField(
                        blank=True, db_column="battery__parameters__opex", null=True
                    ),
                ),
                (
                    "battery_parameters_soc_min",
                    models.FloatField(
                        blank=True, db_column="battery__parameters__soc_min", null=True
                    ),
                ),
                (
                    "battery_parameters_soc_max",
                    models.FloatField(
                        blank=True, db_column="battery__parameters__soc_max", null=True
                    ),
                ),
                (
                    "battery_parameters_c_rate_in",
                    models.FloatField(
                        blank=True,
                        db_column="battery__parameters__c_rate_in",
                        null=True,
                    ),
                ),
                (
                    "battery_parameters_c_rate_out",
                    models.FloatField(
                        blank=True,
                        db_column="battery__parameters__c_rate_out",
                        null=True,
                    ),
                ),
                (
                    "battery_parameters_efficiency",
                    models.FloatField(
                        blank=True,
                        db_column="battery__parameters__efficiency",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_settings_is_selected",
                    models.IntegerField(
                        blank=True,
                        db_column="diesel_genset__settings__is_selected",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_settings_design",
                    models.IntegerField(
                        blank=True,
                        db_column="diesel_genset__settings__design",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_nominal_capacity",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__nominal_capacity",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_lifetime",
                    models.PositiveIntegerField(
                        blank=True,
                        db_column="diesel_genset__parameters__lifetime",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_capex",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__capex",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_opex",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__opex",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_variable_cost",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__variable_cost",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_fuel_cost",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__fuel_cost",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_fuel_lhv",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__fuel_lhv",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_min_load",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__min_load",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_max_load",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__max_load",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_min_efficiency",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__min_efficiency",
                        null=True,
                    ),
                ),
                (
                    "diesel_genset_parameters_max_efficiency",
                    models.FloatField(
                        blank=True,
                        db_column="diesel_genset__parameters__max_efficiency",
                        null=True,
                    ),
                ),
                (
                    "inverter_settings_is_selected",
                    models.IntegerField(
                        blank=True,
                        db_column="inverter__settings__is_selected",
                        null=True,
                    ),
                ),
                (
                    "inverter_settings_design",
                    models.IntegerField(
                        blank=True, db_column="inverter__settings__design", null=True
                    ),
                ),
                (
                    "inverter_parameters_nominal_capacity",
                    models.FloatField(
                        blank=True,
                        db_column="inverter__parameters__nominal_capacity",
                        null=True,
                    ),
                ),
                (
                    "inverter_parameters_lifetime",
                    models.PositiveIntegerField(
                        blank=True,
                        db_column="inverter__parameters__lifetime",
                        null=True,
                    ),
                ),
                (
                    "inverter_parameters_capex",
                    models.FloatField(
                        blank=True, db_column="inverter__parameters__capex", null=True
                    ),
                ),
                (
                    "inverter_parameters_opex",
                    models.FloatField(
                        blank=True, db_column="inverter__parameters__opex", null=True
                    ),
                ),
                (
                    "inverter_parameters_efficiency",
                    models.FloatField(
                        blank=True,
                        db_column="inverter__parameters__efficiency",
                        null=True,
                    ),
                ),
                (
                    "pv_settings_is_selected",
                    models.IntegerField(
                        blank=True, db_column="pv__settings__is_selected", null=True
                    ),
                ),
                (
                    "pv_settings_design",
                    models.IntegerField(
                        blank=True, db_column="pv__settings__design", null=True
                    ),
                ),
                (
                    "pv_parameters_nominal_capacity",
                    models.FloatField(
                        blank=True,
                        db_column="pv__parameters__nominal_capacity",
                        null=True,
                    ),
                ),
                (
                    "pv_parameters_lifetime",
                    models.PositiveIntegerField(
                        blank=True, db_column="pv__parameters__lifetime", null=True
                    ),
                ),
                (
                    "pv_parameters_capex",
                    models.FloatField(
                        blank=True, db_column="pv__parameters__capex", null=True
                    ),
                ),
                (
                    "pv_parameters_opex",
                    models.FloatField(
                        blank=True, db_column="pv__parameters__opex", null=True
                    ),
                ),
                (
                    "rectifier_settings_is_selected",
                    models.IntegerField(
                        blank=True,
                        db_column="rectifier__settings__is_selected",
                        null=True,
                    ),
                ),
                (
                    "rectifier_settings_design",
                    models.IntegerField(
                        blank=True, db_column="rectifier__settings__design", null=True
                    ),
                ),
                (
                    "rectifier_parameters_nominal_capacity",
                    models.FloatField(
                        blank=True,
                        db_column="rectifier__parameters__nominal_capacity",
                        null=True,
                    ),
                ),
                (
                    "rectifier_parameters_lifetime",
                    models.PositiveIntegerField(
                        blank=True,
                        db_column="rectifier__parameters__lifetime",
                        null=True,
                    ),
                ),
                (
                    "rectifier_parameters_capex",
                    models.FloatField(
                        blank=True, db_column="rectifier__parameters__capex", null=True
                    ),
                ),
                (
                    "rectifier_parameters_opex",
                    models.FloatField(
                        blank=True, db_column="rectifier__parameters__opex", null=True
                    ),
                ),
                (
                    "rectifier_parameters_efficiency",
                    models.FloatField(
                        blank=True,
                        db_column="rectifier__parameters__efficiency",
                        null=True,
                    ),
                ),
                (
                    "shortage_settings_is_selected",
                    models.FloatField(
                        blank=True,
                        db_column="shortage__settings__is_selected",
                        null=True,
                    ),
                ),
                (
                    "shortage_parameters_max_shortage_total",
                    models.FloatField(
                        blank=True,
                        db_column="shortage__parameters__max_shortage_total",
                        null=True,
                    ),
                ),
                (
                    "shortage_parameters_max_shortage_timestep",
                    models.FloatField(
                        blank=True,
                        db_column="shortage__parameters__max_shortage_timestep",
                        null=True,
                    ),
                ),
                (
                    "shortage_parameters_shortage_penalty_cost",
                    models.FloatField(
                        blank=True,
                        db_column="shortage__parameters__shortage_penalty_cost",
                        null=True,
                    ),
                ),
                (
                    "project",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomDemand",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("very_low", models.FloatField(default=0.663)),
                ("low", models.FloatField(default=0.215)),
                ("middle", models.FloatField(default=0.076)),
                ("high", models.FloatField(default=0.031)),
                ("very_high", models.FloatField(default=0.015)),
                ("annual_total_consumption", models.FloatField(blank=True, null=True)),
                ("annual_peak_consumption", models.FloatField(blank=True, null=True)),
                (
                    "project",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Simulation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_id", models.CharField(blank=True, max_length=80, null=True)),
                ("status", models.CharField(default="not yet started", max_length=25)),
                (
                    "project",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Results",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "n_consumers",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "n_shs_consumers",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("n_poles", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "n_distribution_links",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "n_connection_links",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "length_distribution_cable",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "average_length_distribution_cable",
                    models.FloatField(blank=True, null=True),
                ),
                (
                    "length_connection_cable",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "average_length_connection_cable",
                    models.FloatField(blank=True, null=True),
                ),
                ("cost_grid", models.PositiveIntegerField(blank=True, null=True)),
                ("cost_shs", models.PositiveIntegerField(blank=True, null=True)),
                ("lcoe", models.PositiveIntegerField(blank=True, null=True)),
                ("res", models.FloatField(blank=True, null=True)),
                ("shortage_total", models.FloatField(blank=True, null=True)),
                ("surplus_rate", models.FloatField(blank=True, null=True)),
                ("cost_renewable_assets", models.FloatField(blank=True, null=True)),
                ("cost_non_renewable_assets", models.FloatField(blank=True, null=True)),
                ("cost_fuel", models.FloatField(blank=True, null=True)),
                ("pv_capacity", models.FloatField(blank=True, null=True)),
                ("battery_capacity", models.FloatField(blank=True, null=True)),
                ("inverter_capacity", models.FloatField(blank=True, null=True)),
                ("rectifier_capacity", models.FloatField(blank=True, null=True)),
                ("diesel_genset_capacity", models.FloatField(blank=True, null=True)),
                ("peak_demand", models.FloatField(blank=True, null=True)),
                ("surplus", models.FloatField(blank=True, null=True)),
                ("fuel_to_diesel_genset", models.FloatField(blank=True, null=True)),
                (
                    "diesel_genset_to_rectifier",
                    models.FloatField(blank=True, null=True),
                ),
                ("diesel_genset_to_demand", models.FloatField(blank=True, null=True)),
                ("rectifier_to_dc_bus", models.FloatField(blank=True, null=True)),
                ("pv_to_dc_bus", models.FloatField(blank=True, null=True)),
                ("battery_to_dc_bus", models.FloatField(blank=True, null=True)),
                ("dc_bus_to_battery", models.FloatField(blank=True, null=True)),
                ("dc_bus_to_inverter", models.FloatField(blank=True, null=True)),
                ("dc_bus_to_surplus", models.FloatField(blank=True, null=True)),
                ("inverter_to_demand", models.FloatField(blank=True, null=True)),
                ("time_grid_design", models.FloatField(blank=True, null=True)),
                ("time_energy_system_design", models.FloatField(blank=True, null=True)),
                ("time", models.FloatField(blank=True, null=True)),
                ("co2_savings", models.FloatField(blank=True, null=True)),
                ("max_voltage_drop", models.FloatField(blank=True, null=True)),
                ("infeasible", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "average_annual_demand_per_consumer",
                    models.FloatField(blank=True, null=True),
                ),
                ("total_annual_consumption", models.FloatField(blank=True, null=True)),
                ("upfront_invest_grid", models.FloatField(blank=True, null=True)),
                ("upfront_invest_diesel_gen", models.FloatField(blank=True, null=True)),
                ("upfront_invest_inverter", models.FloatField(blank=True, null=True)),
                ("upfront_invest_rectifier", models.FloatField(blank=True, null=True)),
                ("upfront_invest_battery", models.FloatField(blank=True, null=True)),
                ("upfront_invest_pv", models.FloatField(blank=True, null=True)),
                ("co2_emissions", models.FloatField(blank=True, null=True)),
                ("fuel_consumption", models.FloatField(blank=True, null=True)),
                ("base_load", models.FloatField(blank=True, null=True)),
                ("max_shortage", models.FloatField(blank=True, null=True)),
                ("epc_total", models.FloatField(blank=True, null=True)),
                ("epc_pv", models.FloatField(blank=True, null=True)),
                ("epc_diesel_genset", models.FloatField(blank=True, null=True)),
                ("epc_inverter", models.FloatField(blank=True, null=True)),
                ("epc_rectifier", models.FloatField(blank=True, null=True)),
                ("epc_battery", models.FloatField(blank=True, null=True)),
                (
                    "simulation",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.simulation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WeatherData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dt", models.DateTimeField()),
                ("lat", models.FloatField()),
                ("lon", models.FloatField()),
                ("wind_speed", models.FloatField(blank=True, null=True)),
                ("temp_air", models.FloatField(blank=True, null=True)),
                ("ghi", models.FloatField(blank=True, null=True)),
                ("dni", models.FloatField(blank=True, null=True)),
                ("dhi", models.FloatField(blank=True, null=True)),
            ],
            options={
                "unique_together": {("dt", "lat", "lon")},
            },
        ),
    ]
